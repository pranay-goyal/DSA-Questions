108. Convert Sorted Array to Binary Search Tree
APPROACH::
  Height balance tree:- treee jiski har node ki height same h i.e., (height of right subtree-height of left subtree)
  -- use given sorted array, find its mid point which will be our root node
  -- recursively build the left and right part of tree 
  -- for this particular question we have used helper function.

CODE-
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* helper(vector<int>& nums,int s,int e) {
        if(s>e)
            return NULL;
        
        int mid=s+(e-s)/2;
        TreeNode* node=new TreeNode(nums[mid]);
        node->left=helper(nums,s,mid-1);
        node->right=helper(nums,mid+1,e);
        return node;

    }
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        if(nums.empty())
            return NULL;
        
        int n=nums.size();
        return helper(nums,0,n-1);

    }
};
