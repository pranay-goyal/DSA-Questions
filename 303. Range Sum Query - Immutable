303. Range Sum Query - Immutable

APPROACH1::  O(mXn)
  -- in this question we need to initialise vector inside constructor, we are provided with the constructor 
  -- use accumulate function to add the element from one idex to another
  -- return the accumulate function

CODE-
class NumArray {
public:
    vector<int> nums;
    NumArray(vector<int>& nums) {
        this->nums=nums;
    }
    
    int sumRange(int left, int right) {
        return accumulate(this->nums.begin()+left,this->nums.begin()+right+1,0);
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * int param_1 = obj->sumRange(left,right);
 */


APPROACH2::
  -- in this we are going to use prefix vector which store the sum of elemtn upto ith index.
  -- Basically we are accumulating sum upto ith index in prefix array
  -- then to get the sum for particular range we just need to subtract left value from right value. i.e., prefix[right]-prefix[left-1]
  -- check for if left-1>=0 

CODE-
class NumArray {
public:
    vector<int> nums;
    vector<int> prefix;
    NumArray(vector<int>& nums) {
        this->nums=nums;
        int n=nums.size();
        prefix.resize(n);
        prefixcalculator(nums);
    }
    
    int sumRange(int left, int right) {
        if(left-1>=0)
            return prefix[right]-prefix[left-1];
        else
            return prefix[right];
    }
    void prefixcalculator(vector<int> nums){
        for(int i=0;i<nums.size();i++){
            if(i==0)
                prefix[i]=nums[i];
            else
                prefix[i]=nums[i]+prefix[i-1];
            
        }
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * int param_1 = obj->sumRange(left,right);
 */
