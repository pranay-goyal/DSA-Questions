33. Search in Rotated Sorted Array

APPROACH1:
  -- use binary search to solve the problem but do not sort it again
  -- since, array is sorted and rotated so we have to check twice the value of taget in different part of array
  -- to implemenet that we use nested if statement


CODE:
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int r=nums.size()-1;
        int l=0;
        int mid;
        while(l<=r){
            mid=l+(r-l)/2;
            if(nums[mid]==target)
                return mid;
            if(nums[mid]>=nums[l]){
                if(target>=nums[l] && target<nums[mid])
                    r=mid-1;
                else
                    l=mid+1;
            }
            else{
                if(target>nums[mid] && target<nums[l])
                    l=mid+1;
                else
                    r=mid-1;
            }
        }
        return -1;
    }
};
