349. Intersection of Two 
Approach1::  O(N2)
  -- use nested for loop to acces eacy element of nums1 arrray to every element of nums2
  -- check for duplicate element using find() 
  -- return ans array

CODE-
class Solution {
public:
    vector<int> intersection(vector<int> &nums1, vector<int> &nums2)
    {
        vector<int> ans;
        for(int i=0;i<nums1.size();i++){
            for(int j=0;j<nums2.size();j++){
                if(nums1[i]==nums2[j]){
                    auto it = find(ans.begin(),ans.end(),nums1[i]);
                    if (it==ans.end()){
                        ans.push_back(nums1[i]);
                    }
                    break;
                }
            }
        }
        return ans;
    }
};

APPROACH2:: 
  -- sort both the givem array
  -- use two pointer approach using while loop
  -- if element found equal add then to ans array and move both the pointer forward.
  -- Else, move the pointers
  -- using erase and unique function combined erase the duplicate element stored in ans array
  -- return ans array

CODE-
class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        int i=0;
        int j=0;
        vector<int> ans;
        
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());
        
        while(i<nums1.size() && j<nums2.size()){
            if(nums1[i]==nums2[j]){
                ans.push_back(nums1[i]);
                i++;
                j++;
            }
            else if(nums1[i]<nums2[j])
                i++;
            else
                j++;
        }
        ans.erase(unique(ans.begin(), ans.end()), ans.end());
        return ans;
    }
};
